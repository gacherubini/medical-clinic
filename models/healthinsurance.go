// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Healthinsurance is an object representing the database table.
type Healthinsurance struct {
	HealthinsuranceID int    `boil:"healthinsurance_id" json:"healthinsurance_id" toml:"healthinsurance_id" yaml:"healthinsurance_id"`
	Name              string `boil:"name" json:"name" toml:"name" yaml:"name"`

	R *healthinsuranceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L healthinsuranceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var HealthinsuranceColumns = struct {
	HealthinsuranceID string
	Name              string
}{
	HealthinsuranceID: "healthinsurance_id",
	Name:              "name",
}

var HealthinsuranceTableColumns = struct {
	HealthinsuranceID string
	Name              string
}{
	HealthinsuranceID: "healthinsurance.healthinsurance_id",
	Name:              "healthinsurance.name",
}

// Generated where

var HealthinsuranceWhere = struct {
	HealthinsuranceID whereHelperint
	Name              whereHelperstring
}{
	HealthinsuranceID: whereHelperint{field: "\"healthinsurance\".\"healthinsurance_id\""},
	Name:              whereHelperstring{field: "\"healthinsurance\".\"name\""},
}

// HealthinsuranceRels is where relationship names are stored.
var HealthinsuranceRels = struct {
	Doctors string
}{
	Doctors: "Doctors",
}

// healthinsuranceR is where relationships are stored.
type healthinsuranceR struct {
	Doctors DoctorSlice `boil:"Doctors" json:"Doctors" toml:"Doctors" yaml:"Doctors"`
}

// NewStruct creates a new relationship struct
func (*healthinsuranceR) NewStruct() *healthinsuranceR {
	return &healthinsuranceR{}
}

func (r *healthinsuranceR) GetDoctors() DoctorSlice {
	if r == nil {
		return nil
	}
	return r.Doctors
}

// healthinsuranceL is where Load methods for each relationship are stored.
type healthinsuranceL struct{}

var (
	healthinsuranceAllColumns            = []string{"healthinsurance_id", "name"}
	healthinsuranceColumnsWithoutDefault = []string{"name"}
	healthinsuranceColumnsWithDefault    = []string{"healthinsurance_id"}
	healthinsurancePrimaryKeyColumns     = []string{"healthinsurance_id"}
	healthinsuranceGeneratedColumns      = []string{}
)

type (
	// HealthinsuranceSlice is an alias for a slice of pointers to Healthinsurance.
	// This should almost always be used instead of []Healthinsurance.
	HealthinsuranceSlice []*Healthinsurance
	// HealthinsuranceHook is the signature for custom Healthinsurance hook methods
	HealthinsuranceHook func(context.Context, boil.ContextExecutor, *Healthinsurance) error

	healthinsuranceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	healthinsuranceType                 = reflect.TypeOf(&Healthinsurance{})
	healthinsuranceMapping              = queries.MakeStructMapping(healthinsuranceType)
	healthinsurancePrimaryKeyMapping, _ = queries.BindMapping(healthinsuranceType, healthinsuranceMapping, healthinsurancePrimaryKeyColumns)
	healthinsuranceInsertCacheMut       sync.RWMutex
	healthinsuranceInsertCache          = make(map[string]insertCache)
	healthinsuranceUpdateCacheMut       sync.RWMutex
	healthinsuranceUpdateCache          = make(map[string]updateCache)
	healthinsuranceUpsertCacheMut       sync.RWMutex
	healthinsuranceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var healthinsuranceAfterSelectMu sync.Mutex
var healthinsuranceAfterSelectHooks []HealthinsuranceHook

var healthinsuranceBeforeInsertMu sync.Mutex
var healthinsuranceBeforeInsertHooks []HealthinsuranceHook
var healthinsuranceAfterInsertMu sync.Mutex
var healthinsuranceAfterInsertHooks []HealthinsuranceHook

var healthinsuranceBeforeUpdateMu sync.Mutex
var healthinsuranceBeforeUpdateHooks []HealthinsuranceHook
var healthinsuranceAfterUpdateMu sync.Mutex
var healthinsuranceAfterUpdateHooks []HealthinsuranceHook

var healthinsuranceBeforeDeleteMu sync.Mutex
var healthinsuranceBeforeDeleteHooks []HealthinsuranceHook
var healthinsuranceAfterDeleteMu sync.Mutex
var healthinsuranceAfterDeleteHooks []HealthinsuranceHook

var healthinsuranceBeforeUpsertMu sync.Mutex
var healthinsuranceBeforeUpsertHooks []HealthinsuranceHook
var healthinsuranceAfterUpsertMu sync.Mutex
var healthinsuranceAfterUpsertHooks []HealthinsuranceHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Healthinsurance) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range healthinsuranceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Healthinsurance) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range healthinsuranceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Healthinsurance) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range healthinsuranceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Healthinsurance) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range healthinsuranceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Healthinsurance) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range healthinsuranceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Healthinsurance) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range healthinsuranceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Healthinsurance) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range healthinsuranceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Healthinsurance) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range healthinsuranceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Healthinsurance) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range healthinsuranceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddHealthinsuranceHook registers your hook function for all future operations.
func AddHealthinsuranceHook(hookPoint boil.HookPoint, healthinsuranceHook HealthinsuranceHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		healthinsuranceAfterSelectMu.Lock()
		healthinsuranceAfterSelectHooks = append(healthinsuranceAfterSelectHooks, healthinsuranceHook)
		healthinsuranceAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		healthinsuranceBeforeInsertMu.Lock()
		healthinsuranceBeforeInsertHooks = append(healthinsuranceBeforeInsertHooks, healthinsuranceHook)
		healthinsuranceBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		healthinsuranceAfterInsertMu.Lock()
		healthinsuranceAfterInsertHooks = append(healthinsuranceAfterInsertHooks, healthinsuranceHook)
		healthinsuranceAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		healthinsuranceBeforeUpdateMu.Lock()
		healthinsuranceBeforeUpdateHooks = append(healthinsuranceBeforeUpdateHooks, healthinsuranceHook)
		healthinsuranceBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		healthinsuranceAfterUpdateMu.Lock()
		healthinsuranceAfterUpdateHooks = append(healthinsuranceAfterUpdateHooks, healthinsuranceHook)
		healthinsuranceAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		healthinsuranceBeforeDeleteMu.Lock()
		healthinsuranceBeforeDeleteHooks = append(healthinsuranceBeforeDeleteHooks, healthinsuranceHook)
		healthinsuranceBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		healthinsuranceAfterDeleteMu.Lock()
		healthinsuranceAfterDeleteHooks = append(healthinsuranceAfterDeleteHooks, healthinsuranceHook)
		healthinsuranceAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		healthinsuranceBeforeUpsertMu.Lock()
		healthinsuranceBeforeUpsertHooks = append(healthinsuranceBeforeUpsertHooks, healthinsuranceHook)
		healthinsuranceBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		healthinsuranceAfterUpsertMu.Lock()
		healthinsuranceAfterUpsertHooks = append(healthinsuranceAfterUpsertHooks, healthinsuranceHook)
		healthinsuranceAfterUpsertMu.Unlock()
	}
}

// One returns a single healthinsurance record from the query.
func (q healthinsuranceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Healthinsurance, error) {
	o := &Healthinsurance{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for healthinsurance")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Healthinsurance records from the query.
func (q healthinsuranceQuery) All(ctx context.Context, exec boil.ContextExecutor) (HealthinsuranceSlice, error) {
	var o []*Healthinsurance

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Healthinsurance slice")
	}

	if len(healthinsuranceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Healthinsurance records in the query.
func (q healthinsuranceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count healthinsurance rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q healthinsuranceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if healthinsurance exists")
	}

	return count > 0, nil
}

// Doctors retrieves all the doctor's Doctors with an executor.
func (o *Healthinsurance) Doctors(mods ...qm.QueryMod) doctorQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"doctors\".\"healthinsurance_id\"=?", o.HealthinsuranceID),
	)

	return Doctors(queryMods...)
}

// LoadDoctors allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (healthinsuranceL) LoadDoctors(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHealthinsurance interface{}, mods queries.Applicator) error {
	var slice []*Healthinsurance
	var object *Healthinsurance

	if singular {
		var ok bool
		object, ok = maybeHealthinsurance.(*Healthinsurance)
		if !ok {
			object = new(Healthinsurance)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeHealthinsurance)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeHealthinsurance))
			}
		}
	} else {
		s, ok := maybeHealthinsurance.(*[]*Healthinsurance)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeHealthinsurance)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeHealthinsurance))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &healthinsuranceR{}
		}
		args[object.HealthinsuranceID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &healthinsuranceR{}
			}
			args[obj.HealthinsuranceID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`doctors`),
		qm.WhereIn(`doctors.healthinsurance_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load doctors")
	}

	var resultSlice []*Doctor
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice doctors")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on doctors")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for doctors")
	}

	if len(doctorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Doctors = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &doctorR{}
			}
			foreign.R.Healthinsurance = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.HealthinsuranceID, foreign.HealthinsuranceID) {
				local.R.Doctors = append(local.R.Doctors, foreign)
				if foreign.R == nil {
					foreign.R = &doctorR{}
				}
				foreign.R.Healthinsurance = local
				break
			}
		}
	}

	return nil
}

// AddDoctors adds the given related objects to the existing relationships
// of the healthinsurance, optionally inserting them as new records.
// Appends related to o.R.Doctors.
// Sets related.R.Healthinsurance appropriately.
func (o *Healthinsurance) AddDoctors(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Doctor) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.HealthinsuranceID, o.HealthinsuranceID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"doctors\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"healthinsurance_id"}),
				strmangle.WhereClause("\"", "\"", 2, doctorPrimaryKeyColumns),
			)
			values := []interface{}{o.HealthinsuranceID, rel.DoctorID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.HealthinsuranceID, o.HealthinsuranceID)
		}
	}

	if o.R == nil {
		o.R = &healthinsuranceR{
			Doctors: related,
		}
	} else {
		o.R.Doctors = append(o.R.Doctors, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &doctorR{
				Healthinsurance: o,
			}
		} else {
			rel.R.Healthinsurance = o
		}
	}
	return nil
}

// SetDoctors removes all previously related items of the
// healthinsurance replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Healthinsurance's Doctors accordingly.
// Replaces o.R.Doctors with related.
// Sets related.R.Healthinsurance's Doctors accordingly.
func (o *Healthinsurance) SetDoctors(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Doctor) error {
	query := "update \"doctors\" set \"healthinsurance_id\" = null where \"healthinsurance_id\" = $1"
	values := []interface{}{o.HealthinsuranceID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Doctors {
			queries.SetScanner(&rel.HealthinsuranceID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Healthinsurance = nil
		}
		o.R.Doctors = nil
	}

	return o.AddDoctors(ctx, exec, insert, related...)
}

// RemoveDoctors relationships from objects passed in.
// Removes related items from R.Doctors (uses pointer comparison, removal does not keep order)
// Sets related.R.Healthinsurance.
func (o *Healthinsurance) RemoveDoctors(ctx context.Context, exec boil.ContextExecutor, related ...*Doctor) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.HealthinsuranceID, nil)
		if rel.R != nil {
			rel.R.Healthinsurance = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("healthinsurance_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Doctors {
			if rel != ri {
				continue
			}

			ln := len(o.R.Doctors)
			if ln > 1 && i < ln-1 {
				o.R.Doctors[i] = o.R.Doctors[ln-1]
			}
			o.R.Doctors = o.R.Doctors[:ln-1]
			break
		}
	}

	return nil
}

// Healthinsurances retrieves all the records using an executor.
func Healthinsurances(mods ...qm.QueryMod) healthinsuranceQuery {
	mods = append(mods, qm.From("\"healthinsurance\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"healthinsurance\".*"})
	}

	return healthinsuranceQuery{q}
}

// FindHealthinsurance retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindHealthinsurance(ctx context.Context, exec boil.ContextExecutor, healthinsuranceID int, selectCols ...string) (*Healthinsurance, error) {
	healthinsuranceObj := &Healthinsurance{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"healthinsurance\" where \"healthinsurance_id\"=$1", sel,
	)

	q := queries.Raw(query, healthinsuranceID)

	err := q.Bind(ctx, exec, healthinsuranceObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from healthinsurance")
	}

	if err = healthinsuranceObj.doAfterSelectHooks(ctx, exec); err != nil {
		return healthinsuranceObj, err
	}

	return healthinsuranceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Healthinsurance) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no healthinsurance provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(healthinsuranceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	healthinsuranceInsertCacheMut.RLock()
	cache, cached := healthinsuranceInsertCache[key]
	healthinsuranceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			healthinsuranceAllColumns,
			healthinsuranceColumnsWithDefault,
			healthinsuranceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(healthinsuranceType, healthinsuranceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(healthinsuranceType, healthinsuranceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"healthinsurance\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"healthinsurance\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into healthinsurance")
	}

	if !cached {
		healthinsuranceInsertCacheMut.Lock()
		healthinsuranceInsertCache[key] = cache
		healthinsuranceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Healthinsurance.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Healthinsurance) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	healthinsuranceUpdateCacheMut.RLock()
	cache, cached := healthinsuranceUpdateCache[key]
	healthinsuranceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			healthinsuranceAllColumns,
			healthinsurancePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update healthinsurance, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"healthinsurance\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, healthinsurancePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(healthinsuranceType, healthinsuranceMapping, append(wl, healthinsurancePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update healthinsurance row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for healthinsurance")
	}

	if !cached {
		healthinsuranceUpdateCacheMut.Lock()
		healthinsuranceUpdateCache[key] = cache
		healthinsuranceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q healthinsuranceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for healthinsurance")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for healthinsurance")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o HealthinsuranceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), healthinsurancePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"healthinsurance\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, healthinsurancePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in healthinsurance slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all healthinsurance")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Healthinsurance) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no healthinsurance provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(healthinsuranceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	healthinsuranceUpsertCacheMut.RLock()
	cache, cached := healthinsuranceUpsertCache[key]
	healthinsuranceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			healthinsuranceAllColumns,
			healthinsuranceColumnsWithDefault,
			healthinsuranceColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			healthinsuranceAllColumns,
			healthinsurancePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert healthinsurance, could not build update column list")
		}

		ret := strmangle.SetComplement(healthinsuranceAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(healthinsurancePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert healthinsurance, could not build conflict column list")
			}

			conflict = make([]string, len(healthinsurancePrimaryKeyColumns))
			copy(conflict, healthinsurancePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"healthinsurance\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(healthinsuranceType, healthinsuranceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(healthinsuranceType, healthinsuranceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert healthinsurance")
	}

	if !cached {
		healthinsuranceUpsertCacheMut.Lock()
		healthinsuranceUpsertCache[key] = cache
		healthinsuranceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Healthinsurance record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Healthinsurance) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Healthinsurance provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), healthinsurancePrimaryKeyMapping)
	sql := "DELETE FROM \"healthinsurance\" WHERE \"healthinsurance_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from healthinsurance")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for healthinsurance")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q healthinsuranceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no healthinsuranceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from healthinsurance")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for healthinsurance")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o HealthinsuranceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(healthinsuranceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), healthinsurancePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"healthinsurance\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, healthinsurancePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from healthinsurance slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for healthinsurance")
	}

	if len(healthinsuranceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Healthinsurance) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindHealthinsurance(ctx, exec, o.HealthinsuranceID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *HealthinsuranceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := HealthinsuranceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), healthinsurancePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"healthinsurance\".* FROM \"healthinsurance\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, healthinsurancePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in HealthinsuranceSlice")
	}

	*o = slice

	return nil
}

// HealthinsuranceExists checks if the Healthinsurance row exists.
func HealthinsuranceExists(ctx context.Context, exec boil.ContextExecutor, healthinsuranceID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"healthinsurance\" where \"healthinsurance_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, healthinsuranceID)
	}
	row := exec.QueryRowContext(ctx, sql, healthinsuranceID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if healthinsurance exists")
	}

	return exists, nil
}

// Exists checks if the Healthinsurance row exists.
func (o *Healthinsurance) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return HealthinsuranceExists(ctx, exec, o.HealthinsuranceID)
}
